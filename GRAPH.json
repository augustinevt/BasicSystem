class PriorityQueue {
  constructor() {
    this.value = [];
  }

  enqueue(val, priority) {
    this.values.push({val, priority})
    this.sort()
  }

  dequeue() {
    return this.values.shift()
  }

  sort() {
    this.values.sort((a, b) = > a.priority - b.priority)
  }
}

function Dijkstra(start, finish) {
  const nodes = new PriorityQueue()
  const distances = {}
  const previous = {}
  const path = []

  let smallest

  // build initial state

  for(let vertex in this.adjacencyList) {
    if(vertex === start) {
      distances[vertex] = 0
      nodes.enqueue(vertex, 0)
    } else {
      distances[vertex] = Infinity
      nodes.enqueue(vertex, Infinity)
    }
    previous[vertex] = null
  }

  // while there are things to visit

  while(nodes.values.length) {
    smallest = nodes.dequeue().val
    if (smallest === finish) {

      while(previous[smallest]) {
        path.push(smallest)
        smallest = previous[smallest]
      }

      break

    }
    if (smallest || distances[smallest] !== Infinity) {

      for (let neighbor in this.adjacencyList[smallest]) {
        // find neighboring node
        let nextNode = this.adjacencyList[smallest][neighbor]
        // calculate new distance to neighboring node
        let candidate = distance[smallest] + nextNode.weight

        let nextNeighbor = nextNode.node

        if (candidate < distances[nextNode.node]) {
          // updating new smallest distance to neighbor
          distances[nextNeighbor] = candidate
          // updating previous - How we got to neighbor
          previous[next] = smallest
          // enqueue in priority queue with new priority
          nodes.enqueue(nextNeighbor, candidate)

        }
      }
    }

    return path.concat(smallest).reverse()
  }
}


=======


class Graph {
  constructor() {
    this.adjacencyList = {}
  }

  addVertex(vertex) {
    this.adjacencyList[vertex] = []
  }

  addEdge(vertex1, vertex2) {
    this.adjacencyList[vertex1].push(vertex2)
    this.adjacencyList[vertex2].push(vertex1)
  }

  removeEdge(vertex1, vertex2) {
    this.adjacencyList[vertex1] = this.adjacencyList[vertex1].filter(edge => edge !== vertex2)
    this.adjacencyList[vertex2] = this.adjacencyList[vertex2].filter(edge => edge !== vertex1)
  }

  removeVertex(vertex) {
    this.adjacencyList[vertex].forEach((linked) => {
      this.removeEdge(vertex, linked)
    })

    delete this.adjacencyList[vertex]
  }
}


//// DFS

  if vertex is empty
    return
  add vertex to result list
  mark to result list
  for each neighbor in vertex's neighbors:
    if neighbor is not visited:
      recursively call DFS on neighbor


(start) => {

  const  result = []
  const visited = {}
  const adjacencyList = this.adjacencyList

  (function dfs(vertex) => {
    if(!vertex) return null
    visited[vertex] = true
    result.push(vertex)

    adjancencyList[vertex].forEach(neighbor => {
      if(!visited[neighbor]){
        return dfs(neighbor)
      }
    })
  })(start)

  return results

}


/// DFS interative

let S be a stack
S.push(start)
while S is not empty
  vertex = S.pop()
  if vertex is not labeled as discovered:
    visit vertex (add to result list)
    label vertex as discovered

    for each of vertex's neighbors, N do
      S.push(N)

(start) => {
  const stack = [start]
  const result = []
  const visited = {}
  let currentVertex

  visited[start] = true
  while(stack.length) {
    currentVertex = stack.pop()
    result.push(currentVertex)

    this.adjacencyList[currentVertex].forEach(neighbor => {
      (!visited[neighbor]) {
        visited[neighbor] = true
        stack.push(neighbor)
      }
    })
  }

  return result
}



/// BFS interative

should accept a starting vertex
create queue and palce the starting vertex in it
create an array to store the nodes visited
create an object to store nodes visited
mark the starting vertex as visited
Loop as long as there is anything in the queue
Remove the first vertex from the queue and push it into the array that stores nodes visited
loop over each vertex in the adjacency list fo the vertex you are visiting
if it is not inside the object stores nodes visited, mark is as visited and enqueue that vertex
once you have finished looping, return the array of visited nodes

(start) => {
  const stack = [start]
  const result = []
  const visited = {}
  let currentVertex
  visited[start] = true

  while(stack.length) {
    currentVertex = stack.shift() // <- makes it bread first
    result.push(currentVertex)

    this.adjacencyList[currentVertex].slice().reverse().forEach(neighbor => {
      (!visited[neighbor]) {
        visited[neighbor] = true
        stack.push(neighbor)
      }
    })
  }

  return result
}


/////////////////


adjacencyList = {
  A: [{node: "B", weight: 10}]
  B: [{node: "A", weight: 10}]
}



class Graph {
  constructor() {
    this.adjacencyList = {}
  }

  addVertex(vertex) {
    this.adjacencyList[vertex] = []
  }

  addEdge(vertex1, vertex2, weight) {
    this.adjacencyList[vertex1].push({node: vertex2, weight})
    this.adjacencyList[vertex2].push({node: vertex1, weight})
  }

  removeEdge(vertex1, vertex2) {
    this.adjacencyList[vertex1] = this.adjacencyList[vertex1].filter(edge => edge !== vertex2)
    this.adjacencyList[vertex2] = this.adjacencyList[vertex2].filter(edge => edge !== vertex1)
  }

  removeVertex(vertex) {
    this.adjacencyList[vertex].forEach((linked) => {
      this.removeEdge(vertex, linked)
    })

    delete this.adjacencyList[vertex]
  }
}


















